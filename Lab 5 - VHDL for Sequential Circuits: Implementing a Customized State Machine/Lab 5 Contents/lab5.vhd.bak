library ieee;
use ieee.std_logic_1164.all;
entity lab5 is
    port
    (
        clk, data_in, reset               : in std_logic;
        stu_id         : out std_logic_vector(3 downto 0);
        curr_state    : out std_logic_vector(3 DOWNTO 0));
end entity;

architecture fsm of lab5 is

    type state_type is (s0,s1,s2,s3,s4,s5,s6,s7,s8);
    
    signal yfsm : state_type;
begin 
    process (clk, reset,data_in)
    begin 
        if reset = '1' then
            yfsm <=s0;
        elsif (clk 'EVENT AND clk='1') then    
            case yfsm is 
                when s0=>
                    if data_in= '1' then 
                        yfsm<=s5;
                    else 
                        yfsm<= s0;
                    end if;
						  
                when s5=>
                    if data_in= '1' then 
                        yfsm<=s4;
                    else 
                        yfsm<= s5;
                    end if;
						  
                when s4=>
                    if data_in= '1' then 
                        yfsm<=s1;
                    else 
                        yfsm<= s4;
                    end if;
						  
                when s1=>
                    if data_in= '1' then 
                        yfsm<=s7;
                    else 
                        yfsm<= s1;
                    end if;
						  
                when s7=>
                    if data_in= '1' then 
                        yfsm<=s2;
                    else 
                        yfsm<= s7;
                    end if;
                when s2=>
                    if data_in= '1' then 
                        yfsm<=s3;
                    else 
                        yfsm<= s2;
                    end if;
						  
                when s3=>
                    if data_in= '1' then 
                        yfsm<=s6;
                    else 
                        yfsm<= s3;
                    end if;
						  
                when s6=>
                    if data_in= '1' then 
                        yfsm<=s0;
                    else 
                        yfsm<= s6;
                    end if;
						  
            end case;
        end if;
    end process;
    
    process (yfsm, data_in)
    begin
        case yfsm is 
            when s0 => --0
                if data_in = '0' then 
                    stu_id <= "0000";
                else
                    stu_id <= "0000";
                end if;
					 
            when s1 => --1
                if data_in = '0' then 
                    stu_id <= "0001";               
                else
                    stu_id <= "0000";
                end if;
					 
            when s2 => --2
                if data_in = '0' then 
                    stu_id <= "0010";
                else
                    stu_id <= "0001";
                end if;
					 
            when s3 => --3
                if data_in = '0' then 
                    stu_id <= "0011";
                else
                    stu_id <= "0010";
                end if;
					 
            when s4 => --4
                if data_in = '0' then 
                    stu_id <= "0100";
                else
                    stu_id <= "0011";
                end if;
            when s5 => --7
                if data_in = '0' then 
                    stu_id <= "0111";
                else
                    stu_id <= "0100";
                end if;
					 
            when s6 => --0
                if data_in = '0' then 
                    stu_id <= "0000";
                else
                    stu_id <= "0111";
                end if;
					 
            when s7 => --7
                if data_in = '0' then 
                    stu_id <= "0111";
                else
                    stu_id <= "0000";
                end if;
  end process;
    
	 process(yfsm)
	 begin 
	 case yfsm is 
            when s0 =>
                 curr_state <= "0000";
            when s1 =>
                curr_state <= "0001";
            when s2 =>
                curr_state <= "0010";
            when s3 =>
                curr_state <= "0011";
            when s4 =>
                curr_state <= "0100";
            when s5 =>
                curr_state <= "0101";
            when s6 =>
                curr_state <= "0110";
            when s7 =>
                curr_state<= "0111";
            when s8 =>
                curr_state <= "1000";    
            
        end case;
    end process;
    
end fsm;              