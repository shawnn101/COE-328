LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

ENTITY ALU_unit IS -- ALU unit includes Reg. 3
    PORT (
        clk, res   : IN std_logic;
        Reg1, Reg2 : IN std_logic_vector(7 DOWNTO 0); -- 8-bit inputs A & B from Reg. 1 & Reg. 2
        opcode     : IN std_logic_vector(7 DOWNTO 0); -- 8-bit opcode from the Control unit
        Result     : OUT std_logic_vector(7 DOWNTO 0) -- 8-bit output Result
    );
END ALU_unit;

ARCHITECTURE calculation OF ALU_unit IS
BEGIN
    PROCESS (clk, res)
    BEGIN
        IF res = '1' THEN
            Result <= (OTHERS => '0'); -- Reset Result to "00000000"
        ELSIF (clk'EVENT AND clk = '1') THEN
            CASE opcode IS
                WHEN "00000001" => -- Addition
                    Result <= std_logic_vector(unsigned(Reg1) + unsigned(Reg2));
                WHEN "00000010" => -- Subtraction
                    Result <= std_logic_vector(unsigned(Reg1) - unsigned(Reg2));
                WHEN "00000100" => -- Inverse
                    Result <= NOT Reg1; -- Bitwise inversion of Reg1
                WHEN "00001000" => -- Boolean NAND
                    Result <= NOT (Reg1 AND Reg2);
                WHEN "00010000" => -- Boolean NOR
                    Result <= NOT (Reg1 OR Reg2);
                WHEN "00100000" => -- Boolean AND
                    Result <= Reg1 AND Reg2;
                WHEN "01000000" => -- Boolean XOR
                    Result <= Reg1 XOR Reg2;
                WHEN "10000000" => -- Boolean OR
                    Result <= Reg1 OR Reg2;
                WHEN OTHERS =>
                    Result <= (OTHERS => '0'); -- Default case
            END CASE;
        END IF;
    END PROCESS;
END calculation;
