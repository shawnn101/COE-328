library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

-- Entity declaration
entity Adder_Subtractor_4bit is
    Port (
        A      : in  STD_LOGIC_VECTOR(3 downto 0);  -- 4-bit input A
        B      : in  STD_LOGIC_VECTOR(3 downto 0);  -- 4-bit input B
        AddSub : in  STD_LOGIC;                     -- Add/Sub control: 0 for add, 1 for subtract
        S      : out STD_LOGIC_VECTOR(3 downto 0);  -- 4-bit output sum
        Cout   : out STD_LOGIC                      -- Carry out (for overflow detection)
    );
end Adder_Subtractor_4bit;

-- Architecture body
architecture Behavioral of Adder_Subtractor_4bit is
    signal B_XOR    : STD_LOGIC_VECTOR(3 downto 0); -- XOR-ed version of B based on AddSub control
    signal C_in     : STD_LOGIC;                    -- Carry in signal
begin
    -- XOR gates to conditionally invert B for subtraction
    B_XOR(0) <= B(0) xor AddSub;
    B_XOR(1) <= B(1) xor AddSub;
    B_XOR(2) <= B(2) xor AddSub;
    B_XOR(3) <= B(3) xor AddSub;

    -- Set initial carry-in for adder: 0 for addition, 1 for subtraction
    C_in <= AddSub;

    -- Instantiate 4-bit adder
    process(A, B_XOR, C_in)
    begin
        -- Perform addition/subtraction using the core adder
        -- A + (B xor AddSub) + AddSub for addition or subtraction
        -- This effectively implements 2's complement subtraction
        (S, Cout) <= ('0' & A) + ('0' & B_XOR) + C_in;
    end process;

end Behavioral;
